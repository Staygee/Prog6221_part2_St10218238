using System;
using System.Collections.Generic;
using System.Linq;

namespace RecipeApp
{

    public delegate void CalorieNotification(string message);


    class Ingredient
    {
        public string Name { get; set; } // Name ingredient
        public double Quantity { get; set; } // ingredient Quantity
        public string Unit { get; set; } // Measurement
        public double Calories { get; set; } // Calories
        public string FoodGroup { get; set; } // Food group
    }


    class RecipeStep
    {
        public string Description { get; set; }
    }


    class Recipe
    {
        public string Name { get; set; } // Recipe Name
        private List<Ingredient> ingredients = new List<Ingredient>(); // Ingrdients list
        private List<RecipeStep> steps = new List<RecipeStep>(); // Steps 

        public event CalorieNotification CalorieNotificationEvent;


        public void EnterRecipeDetails()
        {
            Console.Write("Enter recipe: ");
            Name = Console.ReadLine();

            Console.Write("Enter the amount of ingredients: ");
            if (!int.TryParse(Console.ReadLine(), out int numIngredients))
            {
                Console.WriteLine("Invalid number, please enter a number.");
                return;
            }

            for (int i = 0; i < numIngredients; i++)
            {
                Console.Write($"Provide ingredient #{i + 1} (name quantity unit calories foodgroup): ");
                string[] parts = Console.ReadLine().Split(' ');

                if (parts.Length != 5 ||
                    !double.TryParse(parts[1], out double quantity) ||
                    !double.TryParse(parts[3], out double calories))
                {
                    Console.WriteLine("Invalid, please enter in the format: name quantity unit calories foodgroup.");
                    i--;
                    continue;
                }

                ingredients.Add(new Ingredient
                {
                    Name = parts[0],
                    Quantity = quantity,
                    Unit = parts[2],
                    Calories = calories,
                    FoodGroup = parts[4]
                });
            }

            Console.Write("Enter the amount of steps: ");
            if (!int.TryParse(Console.ReadLine(), out int numSteps))
            {
                Console.WriteLine("Invalid, please enter a number.");
                return;
            }

            for (int i = 0; i < numSteps; i++)
            {
                Console.Write($"Enter step #{i + 1}: ");
                steps.Add(new RecipeStep { Description = Console.ReadLine() });
            }
        }


        public void DisplayRecipe()
        {
            Console.WriteLine($"\nRecipe: {Name}");

            foreach (var ingredient in ingredients)
            {
                Console.WriteLine($"{ingredient.Quantity} {ingredient.Unit} of {ingredient.Name} (Calories: {ingredient.Calories}, Food Group: {ingredient.FoodGroup})");
            }

            Console.WriteLine("Steps:");
            for (int i = 0; i < steps.Count; i++)
            {
                Console.WriteLine($"{i + 1}. {steps[i].Description}");
            }

            double totalCalories = CalculateTotalCalories();
            Console.WriteLine($"Total Calories: {totalCalories}");
            if (totalCalories > 300)
            {
                CalorieNotificationEvent?.Invoke("Caution: The total amount of calories cannot exceed 300.");
            }
        }



        public void ScaleRecipe(double factor)
        {
            foreach (var ingredient in ingredients)
            {
                ingredient.Quantity *= factor;
            }
        }


        public void ClearData()
        {
            ingredients.Clear();
            steps.Clear();
        }


        public double CalculateTotalCalories()
        {
            return ingredients.Sum(ingredient => ingredient.Calories * ingredient.Quantity);
        }
    }


    class Program
    {
        static List<Recipe> recipes = new List<Recipe>(); // All recipies list

        static void Main(string[] args)
        {
            bool exit = false;

            while (!exit)
            {
                Console.WriteLine("\nMenu:");
                Console.WriteLine("1. Enter Recipe");
                Console.WriteLine("2. Show Recipe");
                Console.WriteLine("3. Display Recipe");
                Console.WriteLine("4. Measure Recipe");
                Console.WriteLine("5. Clear All Data");
                Console.WriteLine("6. Leave");

                Console.Write("Enter your choice: ");
                if (!int.TryParse(Console.ReadLine(), out int choice))
                {
                    Console.WriteLine("Invalid, Please enter a number between 1 and 6.");
                    continue;
                }

                switch (choice)
                {
                    case 1:
                        EnterRecipe();
                        break;
                    case 2:
                        ShowAllRecipes();
                        break;
                    case 3:
                        DisplayRecipe();
                        break;
                    case 4:
                        ScaleRecipe();
                        break;
                    case 5:
                        ClearAllData();
                        break;
                    case 6:
                        exit = true;
                        break;
                    default:
                        Console.WriteLine("Invalid, Please enter a number between 1 and 6.");
                        break;
                }
            }
        }


        static void EnterRecipe()
        {
            Recipe recipe = new Recipe();
            recipe.CalorieNotificationEvent += DisplayCalorieNotification;
            recipe.EnterRecipeDetails();
            recipes.Add(recipe);
        }


        static void ShowAllRecipes()
        {
            Console.WriteLine("All Recipes:");
            var sortedRecipes = recipes.OrderBy(r => r.Name).ToList();
            foreach (var recipe in sortedRecipes)
            {
                Console.WriteLine(recipe.Name);
            }
        }


        static void DisplayRecipe()
        {
            Console.Write("Enter the recipe name: ");
            string name = Console.ReadLine();
            Recipe recipe = recipes.FirstOrDefault(r => r.Name.Equals(name, StringComparison.OrdinalIgnoreCase));

            if (recipe != null)
            {
                recipe.DisplayRecipe();
            }
            else
            {
                Console.WriteLine("Ivalid, Recipe not found.");
            }
        }


        static void ScaleRecipe()
        {
            Console.Write("Enter the recipe name to Measure: ");
            string name = Console.ReadLine();
            Recipe recipe = recipes.FirstOrDefault(r => r.Name.Equals(name, StringComparison.OrdinalIgnoreCase));

            if (recipe != null)
            {
                Console.Write("Enter scale sensitivity: ");
                if (!double.TryParse(Console.ReadLine(), out double factor))
                {
                    Console.WriteLine("Invalid, please enter a valid number.");
                    return;
                }
                recipe.ScaleRecipe(factor);
                Console.WriteLine("Recipe scaled successfully.");
            }
            else
            {
                Console.WriteLine("Ivalid, Recipe not found.");
            }
        }


        static void ClearAllData()
        {
            recipes.Clear();
            Console.WriteLine("Data cleared.");
        }


        static void DisplayCalorieNotification(string message)
        {
            Console.WriteLine(message);
        }
    }
}
